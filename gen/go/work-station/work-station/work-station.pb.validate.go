// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: work-station/work-station.proto

package furmanov_work_station_v1_proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SystemLoad with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemLoad) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemLoad with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemLoadMultiError, or
// nil if none found.
func (m *SystemLoad) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemLoad) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for Gpu

	// no validation rules for Network

	// no validation rules for PlayerSlots

	if len(errors) > 0 {
		return SystemLoadMultiError(errors)
	}

	return nil
}

// SystemLoadMultiError is an error wrapping multiple validation errors
// returned by SystemLoad.ValidateAll() if the designated constraints aren't met.
type SystemLoadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemLoadMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemLoadMultiError) AllErrors() []error { return m }

// SystemLoadValidationError is the validation error returned by
// SystemLoad.Validate if the designated constraints aren't met.
type SystemLoadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemLoadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemLoadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemLoadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemLoadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemLoadValidationError) ErrorName() string { return "SystemLoadValidationError" }

// Error satisfies the builtin error interface
func (e SystemLoadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemLoad.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemLoadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemLoadValidationError{}

// Validate checks the field values on Game with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Game) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Game with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GameMultiError, or nil if none found.
func (m *Game) ValidateAll() error {
	return m.validate(true)
}

func (m *Game) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for PosterUrl

	// no validation rules for Platform

	// no validation rules for Rating

	// no validation rules for Summary

	// no validation rules for ReleaseDate

	// no validation rules for AgeRating

	// no validation rules for Publisher

	// no validation rules for Developer

	if len(errors) > 0 {
		return GameMultiError(errors)
	}

	return nil
}

// GameMultiError is an error wrapping multiple validation errors returned by
// Game.ValidateAll() if the designated constraints aren't met.
type GameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameMultiError) AllErrors() []error { return m }

// GameValidationError is the validation error returned by Game.Validate if the
// designated constraints aren't met.
type GameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameValidationError) ErrorName() string { return "GameValidationError" }

// Error satisfies the builtin error interface
func (e GameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGame.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameValidationError{}

// Validate checks the field values on PlayerEnv with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlayerEnv) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayerEnv with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlayerEnvMultiError, or nil
// if none found.
func (m *PlayerEnv) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayerEnv) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	// no validation rules for DisplayWidth

	// no validation rules for DisplayHeight

	// no validation rules for InputType

	// no validation rules for InputVendor

	// no validation rules for InputProduct

	if len(errors) > 0 {
		return PlayerEnvMultiError(errors)
	}

	return nil
}

// PlayerEnvMultiError is an error wrapping multiple validation errors returned
// by PlayerEnv.ValidateAll() if the designated constraints aren't met.
type PlayerEnvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayerEnvMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayerEnvMultiError) AllErrors() []error { return m }

// PlayerEnvValidationError is the validation error returned by
// PlayerEnv.Validate if the designated constraints aren't met.
type PlayerEnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerEnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerEnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerEnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerEnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerEnvValidationError) ErrorName() string { return "PlayerEnvValidationError" }

// Error satisfies the builtin error interface
func (e PlayerEnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayerEnv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerEnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerEnvValidationError{}

// Validate checks the field values on GamesRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GamesRequestMultiError, or
// nil if none found.
func (m *GamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GamesRequestMultiError(errors)
	}

	return nil
}

// GamesRequestMultiError is an error wrapping multiple validation errors
// returned by GamesRequest.ValidateAll() if the designated constraints aren't met.
type GamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamesRequestMultiError) AllErrors() []error { return m }

// GamesRequestValidationError is the validation error returned by
// GamesRequest.Validate if the designated constraints aren't met.
type GamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamesRequestValidationError) ErrorName() string { return "GamesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamesRequestValidationError{}

// Validate checks the field values on GamesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GamesResponseMultiError, or
// nil if none found.
func (m *GamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GamesResponseValidationError{
					field:  fmt.Sprintf("Games[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Hash

	if len(errors) > 0 {
		return GamesResponseMultiError(errors)
	}

	return nil
}

// GamesResponseMultiError is an error wrapping multiple validation errors
// returned by GamesResponse.ValidateAll() if the designated constraints
// aren't met.
type GamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamesResponseMultiError) AllErrors() []error { return m }

// GamesResponseValidationError is the validation error returned by
// GamesResponse.Validate if the designated constraints aren't met.
type GamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamesResponseValidationError) ErrorName() string { return "GamesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamesResponseValidationError{}

// Validate checks the field values on LibraryChangedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LibraryChangedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibraryChangedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LibraryChangedRequestMultiError, or nil if none found.
func (m *LibraryChangedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LibraryChangedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	if len(errors) > 0 {
		return LibraryChangedRequestMultiError(errors)
	}

	return nil
}

// LibraryChangedRequestMultiError is an error wrapping multiple validation
// errors returned by LibraryChangedRequest.ValidateAll() if the designated
// constraints aren't met.
type LibraryChangedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibraryChangedRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibraryChangedRequestMultiError) AllErrors() []error { return m }

// LibraryChangedRequestValidationError is the validation error returned by
// LibraryChangedRequest.Validate if the designated constraints aren't met.
type LibraryChangedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibraryChangedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibraryChangedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibraryChangedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibraryChangedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibraryChangedRequestValidationError) ErrorName() string {
	return "LibraryChangedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LibraryChangedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibraryChangedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibraryChangedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibraryChangedRequestValidationError{}

// Validate checks the field values on LibraryChangedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LibraryChangedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LibraryChangedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LibraryChangedResponseMultiError, or nil if none found.
func (m *LibraryChangedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LibraryChangedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Change

	if len(errors) > 0 {
		return LibraryChangedResponseMultiError(errors)
	}

	return nil
}

// LibraryChangedResponseMultiError is an error wrapping multiple validation
// errors returned by LibraryChangedResponse.ValidateAll() if the designated
// constraints aren't met.
type LibraryChangedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LibraryChangedResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LibraryChangedResponseMultiError) AllErrors() []error { return m }

// LibraryChangedResponseValidationError is the validation error returned by
// LibraryChangedResponse.Validate if the designated constraints aren't met.
type LibraryChangedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LibraryChangedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LibraryChangedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LibraryChangedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LibraryChangedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LibraryChangedResponseValidationError) ErrorName() string {
	return "LibraryChangedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LibraryChangedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLibraryChangedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LibraryChangedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LibraryChangedResponseValidationError{}

// Validate checks the field values on LoadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoadRequestMultiError, or
// nil if none found.
func (m *LoadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoadRequestMultiError(errors)
	}

	return nil
}

// LoadRequestMultiError is an error wrapping multiple validation errors
// returned by LoadRequest.ValidateAll() if the designated constraints aren't met.
type LoadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadRequestMultiError) AllErrors() []error { return m }

// LoadRequestValidationError is the validation error returned by
// LoadRequest.Validate if the designated constraints aren't met.
type LoadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadRequestValidationError) ErrorName() string { return "LoadRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadRequestValidationError{}

// Validate checks the field values on LoadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoadResponseMultiError, or
// nil if none found.
func (m *LoadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLoad()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadResponseValidationError{
					field:  "Load",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadResponseValidationError{
					field:  "Load",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoad()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadResponseValidationError{
				field:  "Load",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadResponseMultiError(errors)
	}

	return nil
}

// LoadResponseMultiError is an error wrapping multiple validation errors
// returned by LoadResponse.ValidateAll() if the designated constraints aren't met.
type LoadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadResponseMultiError) AllErrors() []error { return m }

// LoadResponseValidationError is the validation error returned by
// LoadResponse.Validate if the designated constraints aren't met.
type LoadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadResponseValidationError) ErrorName() string { return "LoadResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadResponseValidationError{}
