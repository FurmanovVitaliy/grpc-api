// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: hub/hub.proto

package furmanov_hub_v1_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	// Fetch the list of available games
	GamesLibrary(ctx context.Context, in *GamesLibraryRequest, opts ...grpc.CallOption) (*GamesLibraryResponse, error)
	// Retrieve detailed information about a specific game
	Game(ctx context.Context, in *GameInfoRequest, opts ...grpc.CallOption) (*GameInfoResponse, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) GamesLibrary(ctx context.Context, in *GamesLibraryRequest, opts ...grpc.CallOption) (*GamesLibraryResponse, error) {
	out := new(GamesLibraryResponse)
	err := c.cc.Invoke(ctx, "/hub.Game/GamesLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Game(ctx context.Context, in *GameInfoRequest, opts ...grpc.CallOption) (*GameInfoResponse, error) {
	out := new(GameInfoResponse)
	err := c.cc.Invoke(ctx, "/hub.Game/Game", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	// Fetch the list of available games
	GamesLibrary(context.Context, *GamesLibraryRequest) (*GamesLibraryResponse, error)
	// Retrieve detailed information about a specific game
	Game(context.Context, *GameInfoRequest) (*GameInfoResponse, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) GamesLibrary(context.Context, *GamesLibraryRequest) (*GamesLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GamesLibrary not implemented")
}
func (UnimplementedGameServer) Game(context.Context, *GameInfoRequest) (*GameInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Game not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_GamesLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamesLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GamesLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.Game/GamesLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GamesLibrary(ctx, req.(*GamesLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Game_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Game(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.Game/Game",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Game(ctx, req.(*GameInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GamesLibrary",
			Handler:    _Game_GamesLibrary_Handler,
		},
		{
			MethodName: "Game",
			Handler:    _Game_Game_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub/hub.proto",
}

// SignalingClient is the client API for Signaling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalingClient interface {
	// Bind a player to a session
	BindPlayer(ctx context.Context, in *BindPlayerRequest, opts ...grpc.CallOption) (*BindPlayerResponse, error)
	// Establish a WebRTC signaling connection
	// This is a bi-directional streaming RPC for real-time communication
	WebRTCSignaling(ctx context.Context, opts ...grpc.CallOption) (Signaling_WebRTCSignalingClient, error)
}

type signalingClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalingClient(cc grpc.ClientConnInterface) SignalingClient {
	return &signalingClient{cc}
}

func (c *signalingClient) BindPlayer(ctx context.Context, in *BindPlayerRequest, opts ...grpc.CallOption) (*BindPlayerResponse, error) {
	out := new(BindPlayerResponse)
	err := c.cc.Invoke(ctx, "/hub.Signaling/BindPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingClient) WebRTCSignaling(ctx context.Context, opts ...grpc.CallOption) (Signaling_WebRTCSignalingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Signaling_ServiceDesc.Streams[0], "/hub.Signaling/WebRTCSignaling", opts...)
	if err != nil {
		return nil, err
	}
	x := &signalingWebRTCSignalingClient{stream}
	return x, nil
}

type Signaling_WebRTCSignalingClient interface {
	Send(*WebRTCSignalingMessage) error
	Recv() (*WebRTCSignalingMessage, error)
	grpc.ClientStream
}

type signalingWebRTCSignalingClient struct {
	grpc.ClientStream
}

func (x *signalingWebRTCSignalingClient) Send(m *WebRTCSignalingMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signalingWebRTCSignalingClient) Recv() (*WebRTCSignalingMessage, error) {
	m := new(WebRTCSignalingMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SignalingServer is the server API for Signaling service.
// All implementations must embed UnimplementedSignalingServer
// for forward compatibility
type SignalingServer interface {
	// Bind a player to a session
	BindPlayer(context.Context, *BindPlayerRequest) (*BindPlayerResponse, error)
	// Establish a WebRTC signaling connection
	// This is a bi-directional streaming RPC for real-time communication
	WebRTCSignaling(Signaling_WebRTCSignalingServer) error
	mustEmbedUnimplementedSignalingServer()
}

// UnimplementedSignalingServer must be embedded to have forward compatible implementations.
type UnimplementedSignalingServer struct {
}

func (UnimplementedSignalingServer) BindPlayer(context.Context, *BindPlayerRequest) (*BindPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPlayer not implemented")
}
func (UnimplementedSignalingServer) WebRTCSignaling(Signaling_WebRTCSignalingServer) error {
	return status.Errorf(codes.Unimplemented, "method WebRTCSignaling not implemented")
}
func (UnimplementedSignalingServer) mustEmbedUnimplementedSignalingServer() {}

// UnsafeSignalingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalingServer will
// result in compilation errors.
type UnsafeSignalingServer interface {
	mustEmbedUnimplementedSignalingServer()
}

func RegisterSignalingServer(s grpc.ServiceRegistrar, srv SignalingServer) {
	s.RegisterService(&Signaling_ServiceDesc, srv)
}

func _Signaling_BindPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServer).BindPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.Signaling/BindPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServer).BindPlayer(ctx, req.(*BindPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signaling_WebRTCSignaling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalingServer).WebRTCSignaling(&signalingWebRTCSignalingServer{stream})
}

type Signaling_WebRTCSignalingServer interface {
	Send(*WebRTCSignalingMessage) error
	Recv() (*WebRTCSignalingMessage, error)
	grpc.ServerStream
}

type signalingWebRTCSignalingServer struct {
	grpc.ServerStream
}

func (x *signalingWebRTCSignalingServer) Send(m *WebRTCSignalingMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signalingWebRTCSignalingServer) Recv() (*WebRTCSignalingMessage, error) {
	m := new(WebRTCSignalingMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Signaling_ServiceDesc is the grpc.ServiceDesc for Signaling service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signaling_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub.Signaling",
	HandlerType: (*SignalingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BindPlayer",
			Handler:    _Signaling_BindPlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WebRTCSignaling",
			Handler:       _Signaling_WebRTCSignaling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hub/hub.proto",
}

// HubStationClient is the client API for HubStation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubStationClient interface {
	// Bi-directional streaming for data exchange between Hub and Stations
	ExchangeStream(ctx context.Context, opts ...grpc.CallOption) (HubStation_ExchangeStreamClient, error)
	WebRTCSignaling(ctx context.Context, opts ...grpc.CallOption) (HubStation_WebRTCSignalingClient, error)
}

type hubStationClient struct {
	cc grpc.ClientConnInterface
}

func NewHubStationClient(cc grpc.ClientConnInterface) HubStationClient {
	return &hubStationClient{cc}
}

func (c *hubStationClient) ExchangeStream(ctx context.Context, opts ...grpc.CallOption) (HubStation_ExchangeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HubStation_ServiceDesc.Streams[0], "/hub.HubStation/ExchangeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubStationExchangeStreamClient{stream}
	return x, nil
}

type HubStation_ExchangeStreamClient interface {
	Send(*ExchangeMessage) error
	Recv() (*ExchangeMessage, error)
	grpc.ClientStream
}

type hubStationExchangeStreamClient struct {
	grpc.ClientStream
}

func (x *hubStationExchangeStreamClient) Send(m *ExchangeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubStationExchangeStreamClient) Recv() (*ExchangeMessage, error) {
	m := new(ExchangeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubStationClient) WebRTCSignaling(ctx context.Context, opts ...grpc.CallOption) (HubStation_WebRTCSignalingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HubStation_ServiceDesc.Streams[1], "/hub.HubStation/WebRTCSignaling", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubStationWebRTCSignalingClient{stream}
	return x, nil
}

type HubStation_WebRTCSignalingClient interface {
	Send(*WebRTCSignalingMessage) error
	Recv() (*WebRTCSignalingMessage, error)
	grpc.ClientStream
}

type hubStationWebRTCSignalingClient struct {
	grpc.ClientStream
}

func (x *hubStationWebRTCSignalingClient) Send(m *WebRTCSignalingMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubStationWebRTCSignalingClient) Recv() (*WebRTCSignalingMessage, error) {
	m := new(WebRTCSignalingMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubStationServer is the server API for HubStation service.
// All implementations must embed UnimplementedHubStationServer
// for forward compatibility
type HubStationServer interface {
	// Bi-directional streaming for data exchange between Hub and Stations
	ExchangeStream(HubStation_ExchangeStreamServer) error
	WebRTCSignaling(HubStation_WebRTCSignalingServer) error
	mustEmbedUnimplementedHubStationServer()
}

// UnimplementedHubStationServer must be embedded to have forward compatible implementations.
type UnimplementedHubStationServer struct {
}

func (UnimplementedHubStationServer) ExchangeStream(HubStation_ExchangeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExchangeStream not implemented")
}
func (UnimplementedHubStationServer) WebRTCSignaling(HubStation_WebRTCSignalingServer) error {
	return status.Errorf(codes.Unimplemented, "method WebRTCSignaling not implemented")
}
func (UnimplementedHubStationServer) mustEmbedUnimplementedHubStationServer() {}

// UnsafeHubStationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubStationServer will
// result in compilation errors.
type UnsafeHubStationServer interface {
	mustEmbedUnimplementedHubStationServer()
}

func RegisterHubStationServer(s grpc.ServiceRegistrar, srv HubStationServer) {
	s.RegisterService(&HubStation_ServiceDesc, srv)
}

func _HubStation_ExchangeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubStationServer).ExchangeStream(&hubStationExchangeStreamServer{stream})
}

type HubStation_ExchangeStreamServer interface {
	Send(*ExchangeMessage) error
	Recv() (*ExchangeMessage, error)
	grpc.ServerStream
}

type hubStationExchangeStreamServer struct {
	grpc.ServerStream
}

func (x *hubStationExchangeStreamServer) Send(m *ExchangeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubStationExchangeStreamServer) Recv() (*ExchangeMessage, error) {
	m := new(ExchangeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HubStation_WebRTCSignaling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubStationServer).WebRTCSignaling(&hubStationWebRTCSignalingServer{stream})
}

type HubStation_WebRTCSignalingServer interface {
	Send(*WebRTCSignalingMessage) error
	Recv() (*WebRTCSignalingMessage, error)
	grpc.ServerStream
}

type hubStationWebRTCSignalingServer struct {
	grpc.ServerStream
}

func (x *hubStationWebRTCSignalingServer) Send(m *WebRTCSignalingMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubStationWebRTCSignalingServer) Recv() (*WebRTCSignalingMessage, error) {
	m := new(WebRTCSignalingMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubStation_ServiceDesc is the grpc.ServiceDesc for HubStation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubStation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub.HubStation",
	HandlerType: (*HubStationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExchangeStream",
			Handler:       _HubStation_ExchangeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WebRTCSignaling",
			Handler:       _HubStation_WebRTCSignaling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hub/hub.proto",
}
