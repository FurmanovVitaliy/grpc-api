syntax = "proto3";

package auth;

option go_package = "furmanov.sso.v1.proto";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// Определение ролей пользователя
enum Role {
    ROLE_USER = 0;
    ROLE_ADMIN = 1;
}

// Определение статуса сессии
enum SessionStatus {
    SESSION_ACTIVE = 0;
    SESSION_EXPIRED = 1;
    SESSION_REVOKED = 2;
}

// Структура пользователя
message User {
    int64 id = 1;              // Уникальный идентификатор пользователя
    string email = 2;          // Email пользователя
    string username = 3;       // Имя пользователя
    string full_name = 4;      // Полное имя
    string avatar_url = 5;     // URL аватара
    Role role = 6;             // Роль пользователя
}

// Структура сессии
message Session {
    string session_id = 1;         // Уникальный идентификатор сессии
    int64 user_id = 2;             // ID пользователя
    int32 app_id = 3;              // ID приложения
    string ip_address = 4;         // IP-адрес клиента
    string user_agent = 5;         // User-Agent клиента
    SessionStatus status = 6;      // Статус сессии
    google.protobuf.Timestamp created_at = 7; // Время создания сессии
    google.protobuf.Timestamp last_activity = 8; // Время последней активности
    google.protobuf.Timestamp expired_at = 9;    // Время истечения сессии
}

// Сервис аутентификации
service Auth {

    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/api/auth/register"
            body: "*"
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/auth/login"
            body: "*"
        };
    }

    rpc Logout(LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/api/auth/logout"
            body: "*"
        };
    }

    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/auth/refresh-token"
            body: "*"
        };
    }

    rpc OAuth(OAuthRequest) returns (OAuthResponse) {
        option (google.api.http) = {
            post: "/api/auth/oauth"
            body: "*"
        };
    }

    rpc OAuthCallback(OAuthCallbackRequest) returns (OAuthCallbackResponse) {
        option (google.api.http) = {
            post: "/api/auth/oauth-callback"
            body: "*"
        };
    }

    rpc ActiveSessions(ActiveSessionsRequest) returns (ActiveSessionsResponse) {
        option (google.api.http) = {
            get: "/api/auth/sessions"
        };
    }

    rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse) {
        option (google.api.http) = {
            post: "/api/auth/revoke-session"
            body: "*"
        };
    }

    rpc RevokeAllSessions(RevokeAllSessionsRequest) returns (RevokeAllSessionsResponse) {
        option (google.api.http) = {
            post: "/api/auth/revoke-all-sessions"
            body: "*"
        };
    }

    rpc BlockUser(BlockUserRequest) returns (BlockUserResponse) {
        option (google.api.http) = {
            post: "/api/auth/admin/block-user"
            body: "*"
        };
    }

    rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
        option (google.api.http) = {
            get: "/api/auth/me"
        };
    }
}

// Запросы и ответы для регистрации
message RegisterRequest {
    string email = 1;
    string password = 2;
    string username = 3;
    string full_name = 4;
}

message RegisterResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для входа
message LoginRequest {
    string email = 1;
    string password = 2;
    int32 app_id = 3;
}

message LoginResponse {
    string access_token = 1;
    string session_id = 2;
    User user_info = 3;
    int64 expires_in = 4; // Срок действия токена в секундах
    string message = 5;
}

// Запросы и ответы для выхода
message LogoutRequest {
    string session_id = 1;
}

message LogoutResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для обновления токена
message RefreshTokenRequest {
    string session_id = 1;
}

message RefreshTokenResponse {
    string access_token = 1;
    int64 expires_in = 2; // Срок действия нового токена
    bool success = 3;
    string message = 4;
}

// Запросы и ответы для OAuth
message OAuthRequest {
    string provider = 1;
    int32 app_id = 2;
}

message OAuthResponse {
    string auth_url = 1;
    string provider = 2;
}

message OAuthCallbackRequest {
    string provider = 1;
    int32 app_id = 2;
    string code = 3;
    string state = 4;
}

message OAuthCallbackResponse {
    string access_token = 1;
    string session_id = 2;
    User user_info = 3;
    string message = 4;
}

// Запросы и ответы для активных сессий
message ActiveSessionsRequest {
    string user_id = 1;
}

message ActiveSessionsResponse {
    repeated Session sessions = 1;
}

// Запросы и ответы для управления сессиями
message RevokeSessionRequest {
    string session_id = 1;
}

message RevokeSessionResponse {
    bool success = 1;
    string message = 2;
}

message RevokeAllSessionsRequest {
    string user_id = 1;
}

message RevokeAllSessionsResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для блокировки пользователей
message BlockUserRequest {
    string user_id = 1;
}

message BlockUserResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для получения текущего пользователя
message GetCurrentUserRequest {}

message GetCurrentUserResponse {
    User user_info = 1;
}
