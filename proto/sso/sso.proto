syntax = "proto3";

package auth;

option go_package = "furmanov.sso.v1.proto";
import "google/api/annotations.proto";

service Auth {
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/auth/register"
            body: "*"
        };
    }
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/auth/login"
            body: "*"
        };
    }
    rpc Logout (LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/auth/logout"
            body: "*"
        };
    }

    rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/auth/refresh-token"
            body: "*"
        };
    }

    rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse) {
        option (google.api.http) = {
            post: "/auth/is-admin"
            body: "*"
        };
    }
    rpc OAuth (OAuthRequest) returns (OAuthResponse) {
        option (google.api.http) = {
            post: "/auth/oauth"
            body: "*"
        };
    }

    // Admin functions
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/auth/admin/create"
            body: "*"
        };
    }

    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            post: "/auth/admin/delete"
            body: "*"
        };
    }

    rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
        option (google.api.http) = {
            get: "/auth/admin/get-info"
        };
    }

    // User functions
    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/auth/update"
            body: "*"
        };
    }
}

message RegisterRequest {
    string username = 1; // Username of the user to register
    string email = 2;    // Email of the user to register
    string password = 3; // Password of the user to register
}

message RegisterResponse {
    int64 user_id = 1; // ID of the user that was registered
}

message LoginRequest {
    string email = 1;  // Email of the user to login
    string password = 2; // Password of the user to login
    int32 app_id = 3;  // ID of the app that the user is logging in to
}

message LoginResponse {
    string access_token = 1;  // Token that can be used to authenticate the user
    string refresh_token = 2; // Token that can be used to refresh the access token
}

message LogoutRequest {
    string access_token = 1; // Token that can be used to authenticate the user
}

message LogoutResponse {
    bool success = 1; // Whether the user was successfully logged out
}

message RefreshTokenRequest {
    string refresh_token = 1; // Token that can be used to refresh the access token
}

message RefreshTokenResponse {
    string access_token = 1;  // Token that can be used to authenticate the user
    string refresh_token = 2; // Token that can be used to refresh the access token
}

message IsAdminRequest {
   int64 user_id = 1; // ID of the user to check if they are an admin
}

message IsAdminResponse {
    bool is_admin = 1; // Whether the user is an admin or not
}

message OAuthResponse {
    string access_token = 1;  // Token that can be used to authenticate the user
    string refresh_token = 2; // Token that can be used to refresh the access token
}

message OAuthRequest {
    string provider = 1; // Provider of the OAuth flow
    string code = 2;     // Code that was returned by the OAuth provider
    int32 app_id = 3;    // ID of the app that the user is logging in to
}

// Admin functions

message CreateRequest {
    string access_token = 1; // Token that can be used to authenticate the user
    string username = 2;
    string email = 3;
    string password = 4;
}

message CreateResponse {
    int64 user_id = 1; // ID of the newly created user
}

message DeleteRequest {
    int64 user_id = 1; // ID of the user to be deleted
}

message DeleteResponse {
    bool success = 1;  // Whether the user was successfully deleted
}

message GetInfoRequest {
    string access_token = 1; // Token that can be used to authenticate the user
    int64 user_id = 2; // ID of the user whose info is to be retrieved
}

message GetInfoResponse {
    string username = 1;
    string email = 2;
    bool is_admin = 3;
    // Add more user fields as needed
}

// User functions

message UpdateRequest {
    string access_token = 1; // Token that can be used to authenticate the user
    string username = 2;  // New username (optional)
    string email = 3;     // New email (optional)
    string password = 4;  // New password (optional)
    bytes avatar = 5;     // New avatar image (optional)
}

message UpdateResponse {
    bool success = 1;     // Whether the user info was successfully updated
}
