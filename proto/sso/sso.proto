syntax = "proto3";

package auth;

option go_package = "furmanov.sso.v1.proto";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// Определение статуса сессии
enum SessionStatus {
    SESSION_ACTIVE = 0;
    SESSION_EXPIRED = 1;
    SESSION_REVOKED = 2;
}

// Структура сессии
message Session {
    string session_id = 1;         // Уникальный идентификатор сессии
    string ip_address = 2;         // IP-адрес клиента
    string user_agent = 3;         // User-Agent клиента
    SessionStatus status = 4;      // Статус сессии
    google.protobuf.Timestamp created_at = 5; // Время создания сессии
    google.protobuf.Timestamp last_activity = 6; // Время последней активности
    google.protobuf.Timestamp expired_at = 7;    // Время истечения сессии
}

// Сервис аутентификации
service Auth {

    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/api/auth/register"
            body: "*"
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/auth/login"
            body: "*"
        };
    }

    rpc Logout(LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/api/auth/logout"
            body: "*"
        };
    }

    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/auth/refresh-token"
            body: "*"
        };
    }

    rpc OAuth(OAuthRequest) returns (OAuthResponse) {
        option (google.api.http) = {
            post: "/api/auth/oauth"
            body: "*"
        };
    }

    rpc GithubCallback(OAuthCallbackRequest) returns (OAuthCallbackResponse) {
    option (google.api.http) = {
        get: "/api/auth/github-callback"
        };
    }

    rpc ActiveSessions(ActiveSessionsRequest) returns (ActiveSessionsResponse) {
        option (google.api.http) = {
            get: "/api/auth/sessions"
        };
    }

    rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse) {
        option (google.api.http) = {
            post: "/api/auth/revoke-session"
            body: "*"
        };
    }

    rpc RevokeAllSessions(RevokeAllSessionsRequest) returns (RevokeAllSessionsResponse) {
        option (google.api.http) = {
            post: "/api/auth/revoke-all-sessions"
            body: "*"
        };
    }

    rpc BlockUser(BlockUserRequest) returns (BlockUserResponse) {
        option (google.api.http) = {
            post: "/api/auth/admin/block-user"
            body: "*"
        };
    }
}

// Запросы и ответы для регистрации
message RegisterRequest {
    string email = 1;
    string password = 2;
    string username = 3;

}

message RegisterResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для входа
message LoginRequest {
    string email = 1;
    string password = 2;
    int32 app_id = 3;
}

message LoginResponse {
    string access_token = 1;
    string refresh_token =2;
    string message = 3;
}

// Запросы и ответы для выхода
message LogoutRequest {
    string session_id = 1;
}

message LogoutResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для обновления токена
message RefreshTokenRequest {
    string refresh_token = 1;
}

message RefreshTokenResponse {
    string access_token = 1;
}

// Запросы и ответы для OAuth
message OAuthRequest {
    string provider = 1;
    int32 app_id = 2;
}

message OAuthResponse {
    string auth_url = 1;
    string provider = 2;
}

message OAuthCallbackRequest {
    string code = 1;
    string state = 2;
}

message OAuthCallbackResponse {
    string access_token = 1;
    string refresh_token =2;
    string message = 3;
}

// Запросы и ответы для активных сессий
message ActiveSessionsRequest {
    string user_id = 1;
    string access_token = 2;
    int32 app_id = 3;
}

message ActiveSessionsResponse {
    repeated Session sessions = 1;
}

// Запросы и ответы для управления сессиями
message RevokeSessionRequest {
    string session_id = 1;
    string access_token = 2;
    int32 app_id = 3;
}

message RevokeSessionResponse {
    bool success = 1;
    string message = 2;
    
}

message RevokeAllSessionsRequest {
    string user_id = 1;
    string access_token = 2;
}

message RevokeAllSessionsResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для блокировки пользователей
message BlockUserRequest {
    string user_id = 1;
    string access_token = 2;
}

message BlockUserResponse {
    bool success = 1;
    string message = 2;
    int32 app_id = 3;
}

// Запросы и ответы для получения текущего пользователя
message GetCurrentUserRequest {
    string user_id = 1;
    string access_token = 2;
    int32 app_id = 3;
}

