syntax = "proto3";

package auth;

option go_package = "furmanov.sso.v1.proto";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

enum OAuthProvider {
    GOOGLE = 0;
    FACEBOOK = 1;
    GITHUB = 2;
    APPLE = 3;
}

enum SessionStatus {
    SESSION_ACTIVE = 0;
    SESSION_EXPIRED = 1;
    SESSION_REVOKED = 2;
}

enum Role{
    USER = 0;
    ADMIN = 1;
}

message Session {
    string session_id = 1 [(validate.rules).string = {uuid: true}];
    string user_id = 2 [(validate.rules).string = {uuid: true}];  // Добавлено
    string ip_address = 3 [(validate.rules).string = {ip: true}]; 
    string user_agent = 4 [(validate.rules).string = {min_len: 1}];
    SessionStatus status = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp last_activity = 7;
    google.protobuf.Timestamp expired_at = 8;
}

message User {
    string email = 1;
    string username = 2;
    string avatar_url = 3;
    Role role = 4;
}


// Сервис аутентификации
service Auth {

    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/api/auth/register"
            body: "*"
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/auth/login"
            body: "*"
        };
    }

    rpc Logout(LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/api/auth/logout"
            body: "*"
        };
    }

    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/auth/refresh-token"
            body: "*"
        };
    }

    rpc OAuth(OAuthRequest) returns (OAuthResponse) {
        option (google.api.http) = {
            post: "/api/auth/oauth"
            body: "*"
        };
    }

    rpc GithubCallback(OAuthCallbackRequest) returns (OAuthCallbackResponse) {
    option (google.api.http) = {
        get: "/api/auth/github-callback"
        };
    }

    rpc ActiveSessions(ActiveSessionsRequest) returns (ActiveSessionsResponse) {
        option (google.api.http) = {
            get: "/api/auth/sessions"
        };
    }

    rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse) {
        option (google.api.http) = {
            post: "/api/auth/revoke-session"
            body: "*"
        };
    }

    rpc RevokeAllSessions(RevokeAllSessionsRequest) returns (RevokeAllSessionsResponse) {
        option (google.api.http) = {
            post: "/api/auth/revoke-all-sessions"
            body: "*"
        };
    }

    rpc BlockUser(BlockUserRequest) returns (BlockUserResponse) {
        option (google.api.http) = {
            post: "/api/auth/admin/block-user"
            body: "*"
        };
    }
}

// Запросы и ответы для регистрации
message RegisterRequest {
    string email = 1 [(validate.rules).string = {email: true}];
    string password = 2 [(validate.rules).string = {
    min_len: 8,
    max_len: 100,
    pattern: "^[A-Za-z\\d!@#$%^&*]{8,100}$"}];
    string username = 3 [(validate.rules).string = {min_len: 3, max_len: 50, pattern: "^[a-zA-Z0-9_]+$"}];
}

message RegisterResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для входа
message LoginRequest {
    string email = 1 [(validate.rules).string = {email: true}];
    string password = 2 [(validate.rules).string = {min_len: 8, max_len: 100}];
    int32 app_id = 3 [(validate.rules).int32 = {gt: 0}];
}

message LoginResponse {
    User user = 1;
    string session_id = 2;
    string access_token = 3;
    string refresh_token = 4;
    google.protobuf.Timestamp access_token_expires_at = 5;
    google.protobuf.Timestamp refresh_token_expires_at = 6;
    string message = 7;
}


message LogoutRequest {
    string session_id = 1 [(validate.rules).string = {uuid: true}];
}

message LogoutResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для обновления токена
message RefreshTokenRequest {
    string refresh_token = 1 [(validate.rules).string = {min_len: 1}];
}

message RefreshTokenResponse {
    string access_token = 1;
    google.protobuf.Timestamp access_token_expires_at = 2;
}

// Запросы и ответы для OAuth
message OAuthRequest {
    OAuthProvider provider = 1;
    int32 app_id = 2 [(validate.rules).int32 = {gt: 0}];
}

message OAuthResponse {
    string auth_url = 1;
    string provider = 2;
}

message OAuthCallbackRequest {
    string code = 1 [(validate.rules).string = {min_len: 1}];
    string state = 2 [(validate.rules).string = {min_len: 1}];
}

message OAuthCallbackResponse {
    User user = 1;
    string session_id = 2;
    string access_token = 3;
    string refresh_token = 4;
    google.protobuf.Timestamp access_token_expires_at = 5;
    google.protobuf.Timestamp refresh_token_expires_at = 6;
    string message = 7;
}

// Запросы и ответы для активных сессий
message ActiveSessionsRequest {
    string access_token = 1 [(validate.rules).string = {min_len: 1}];
    int32 app_id = 2 [(validate.rules).int32 = {gt: 0}];
}

message ActiveSessionsResponse {
    repeated Session sessions = 1;
}

// Запросы и ответы для управления сессиями
message RevokeSessionRequest {
    string session_id = 1 [(validate.rules).string = {min_len: 1}];
    string access_token = 2 [(validate.rules).string = {min_len: 1}];
    int32 app_id = 3 [(validate.rules).int32 = {gt: 0}];
}

message RevokeSessionResponse {
    bool success = 1;
    string message = 2;
}

message RevokeAllSessionsRequest {
    string access_token = 1 [(validate.rules).string = {min_len: 1}];
    int32 app_id = 2 [(validate.rules).int32 = {gt: 0}];
}

message RevokeAllSessionsResponse {
    bool success = 1;
    string message = 2;
}

// Запросы и ответы для блокировки пользователей
message BlockUserRequest {
    string user_id = 1 [(validate.rules).string = {uuid: true}];
    string access_token = 2 [(validate.rules).string = {min_len: 1}];
}

message BlockUserResponse {
    bool success = 1;
    string message = 2;
    int32 app_id = 3 [(validate.rules).int32 = {gt: 0}];
}

